#!/bin/bash

python -m dev_tools.create_package --dev

# This is the version that it will be mapped to.
VERSION="0.1.$(git rev-list --count HEAD)"

# Define source and destination folders
LOCAL_SOURCE_FOLDER="./"
USER="pi"

# If your local network does not have Bonjour service OR
# you have multiple devices on the network,
# just modify the target variable in .vscode/settings.json

# Check if 'settings.json' exists
if [ ! -f ".vscode/settings.json" ]; then
    # If not, copy 'settings.example.json' to it's place
    cp ".vscode/settings.example.json" ".vscode/settings.json"
    echo "Looks like first run, copied vscode settings.example to settings!"
fi

# jq only works on linux, however as we are using python anyways, this is the easy way to get the target out.
HOST=$(python3 -c "import json; print(json.load(open('.vscode/settings.json'))['target'])")
REMOTE_DESTINATION_FOLDER="/home/pi/RevvyFramework/user/packages/"

PACKAGE_FILENAME="framework-$VERSION"
TARGET_FOLDER_NAME="revvy-$VERSION"
PACKAGE_SOURCE="install/$PACKAGE_FILENAME.tar.gz"

# Production directory
TARGET="/home/pi/RevvyFramework/user/packages/$TARGET_FOLDER_NAME/"

DEBUG_PORT=5678

echo "Deploying to: $USER@$HOST:$TARGET"

ssh $USER@$HOST "mkdir -p $TARGET && tar -xzf - -C $TARGET --warning=no-timestamp && \
    sudo systemctl stop revvy; killall python3; echo "PI: Files extracted to target folder."" < $PACKAGE_SOURCE

echo ""
echo "---------------------------------------------------------------"
echo ""

### Start the deployed script!
ssh $USER@$HOST "sudo systemctl stop revvy"

# For debug mode, run ./debug 1
if [ "$#" -ge 1 ] && [ "$1" -eq 1 ]; then

    # DEBUG_RUNNER="cd $TARGET && python3 -u -m debugpy --listen 0.0.0.0:$DEBUG_PORT --wait-for-client -m tests.hil_tests.tests >/dev/null 2>&1 & "
    DEBUG_RUNNER="cd $TARGET && python3 -u -m debugpy --listen 0.0.0.0:$DEBUG_PORT -m tests.hil_tests.tests"

    # As netstat -tnlp requires sudo permissions, it'll show a warning
    # as we are not running it with sudo on the stderr stream.
    # We do not need that.
    WAIT_FOR_DEBUGGER="echo 'Waiting for the debugger to come online...';while ! netstat -tnlp 2>/dev/null | grep -q ':$DEBUG_PORT'; do sleep 0.5;"
    WAIT_FOR_DEBUGGER+="echo -n '.'; done; echo ' Ready! Connecting to debugger!'; exit"

    # Run the debug ssh and let it go. The elegant would be to run these scripts one
    # after the other, but the ssh stays open, even if I try to make python3 to run
    # with nohup, and it never terminates the connection. This script has to terminate
    # for VSCode to be able to connect.
    ssh $USER@$HOST $DEBUG_RUNNER &

    # Once the script is running, the debugger takes it's time to load up. We wait for this
    # here, it's checking if the port is open in a non-intrusive way. Once it closes, the script
    # concludes and VSCode will try to connect.
    ssh $USER@$HOST $WAIT_FOR_DEBUGGER
else
    # Simple deploy, no debugger: just start running, do not wait for debugger.
    RUNNER="cd $TARGET && python3 -u -m tests.hil_tests.tests"
    ssh $USER@$HOST $RUNNER
fi


