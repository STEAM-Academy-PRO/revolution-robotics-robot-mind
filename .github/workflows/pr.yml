name: PR checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CPU_COUNT: 2

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}

jobs:
  check-mcu-bootloader:
    permissions:
      contents: read # checkout
      pull-requests: read # paths-filter

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            mcu-bootloader:
              - mcu-bootloader/**
              - .github/workflows/pr.yml

      - name: Install compiler
        if: steps.filter.outputs.mcu-bootloader == 'true'
        run: |
          cd /usr/share
          mkdir gcc-arm
          cd gcc-arm
          wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2 -O toolchain.tar.bz2
          tar -xjf toolchain.tar.bz2

          sudo apt-get install cppcheck

      - name: Build Debug bootloader
        if: steps.filter.outputs.mcu-bootloader == 'true'
        run: |
          cd mcu-bootloader
          make all config=debug -j${{ env.CPU_COUNT }}
          make check config=debug

      - name: Upload artifacts
        if: steps.filter.outputs.mcu-bootloader == 'true' && github.event.pull_request.draft == false
        uses: actions/upload-artifact@v4
        with:
          name: mcu-bootloader
          path: |
            mcu-bootloader/Build/Debug/mcu-bootloader/rrrc_samd51.elf
            mcu-bootloader/Build/Debug/mcu-bootloader/rrrc_samd51.bin
          retention-days: 3

  check-mcu-firmware:
    permissions:
      contents: read # checkout
      pull-requests: read # paths-filter

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch all history so that we can use `git rev-list --count`
          # TODO add a suffix for branch builds as the commit counter isn't that reliable here

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            mcu-firmware:
              - mcu-firmware/**
              - pi-firmware/**
              - .github/workflows/pr.yml

      - name: Install dependencies
        if: steps.filter.outputs.mcu-firmware == 'true'
        run: |
          eval `ssh-agent -s`
          ssh-add - <<< '${{ secrets.SSH_PRIVATE_KEY }}'
          cd mcu-firmware
          echo 'Upgrade pip' # default pip discards cglue's package
          python -m pip install --upgrade pip
          pip --version
          echo 'Install pip requirements'
          pip install -r tools/requirements.txt
          sudo apt-get install graphviz

      - name: Install compiler
        if: steps.filter.outputs.mcu-firmware == 'true'
        run: |
          cd /usr/share
          mkdir gcc-arm
          cd gcc-arm
          wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2 -O toolchain.tar.bz2
          tar -xjf toolchain.tar.bz2

      - name: Build Debug firmware
        if: steps.filter.outputs.mcu-firmware == 'true'
        run: |
          cd mcu-firmware
          python -m tools.gen_version
          python -m tools.generate_makefile
          cglue --generate
          make all config=debug -j${{ env.CPU_COUNT }}
          python -m tools.prepare --debug

      - name: Visualize architecture
        if: steps.filter.outputs.mcu-firmware == 'true'
        run: |
          cd mcu-firmware
          python -m tools.generate_component_diagram --ignore-components=Runtime --output=Build/output/map

      - name: Upload artifacts
        if: steps.filter.outputs.mcu-firmware == 'true' && github.event.pull_request.draft == false
        uses: actions/upload-artifact@v4
        with:
          name: mcu-firmware
          path: mcu-firmware/Build/output/
          retention-days: 3

  check-pi-firmware:
    permissions:
      contents: read # checkout
      pull-requests: read # paths-filter

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            pi-firmware:
              - pi-firmware/**
              - .github/workflows/pr.yml

      - name: Running tests
        if: steps.filter.outputs.pi-firmware == 'true'
        run: |
          cd pi-firmware

          # install dependencies
          pip install -r install/requirements.txt
          pip install -r install/requirements_test.txt

          # check formatting
          black --check .

          # run linter
          pyright

          timeout 5m nose2 -B

  archive-pi-firmware:
    permissions:
      contents: read # checkout
      pull-requests: read # paths-filter

    runs-on: ubuntu-latest
    needs: [check-mcu-firmware, check-pi-firmware]
    if: github.event.pull_request.draft == false

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch all history so that we can use `git rev-list --count`
          # TODO add a suffix for branch builds as the commit counter isn't that reliable here

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            any-source:
              - pi-firmware/**
              - mcu-firmware/**
              - .github/workflows/pr.yml

      - name: Running checks
        if: steps.filter.outputs.any-source == 'true'
        run: |
          cd pi-firmware

          # clean up the firmware directory to avoid stale files
          rm -rf data/firmware

      - name: Package the newly built mcu-firmware
        if: |
          steps.filter.outputs.any-source == 'true'
          && needs.check-mcu-firmware.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: mcu-firmware
          path: pi-firmware/data/firmware

      # at this point, we should have a fresh mcu-firmware in pi-firmware/data/firmware

      - name: Assembling package
        if: steps.filter.outputs.any-source == 'true'
        run: |
          cd pi-firmware
          python -m dev_tools.create_package --dev

      - name: Upload artifacts
        if: steps.filter.outputs.any-source == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: pi-firmware
          path: |
            pi-firmware/install/pi-firmware.*
            pi-firmware/install/framework-*.tar.gz
          retention-days: 3

  run-hil-test:
    permissions:
      contents: read # checkout

    needs: [archive-pi-firmware]
    runs-on: self-hosted

    steps:
      - name: Download python firmware package
        uses: actions/download-artifact@v4
        with:
          name: pi-firmware
          path: ~/RevvyFramework/user/ble

      - name: Running tests
        run: |
          sudo systemctl stop revvy
          ~/RevvyFramework/launch_revvy.py --setup --test
